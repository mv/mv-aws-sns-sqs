###
### Ref:
###   https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html
###

AWSTemplateFormatVersion: "2010-09-09"

Description: "SNS/SQS/Messaging: with dead letter and depth alarm"

Parameters:

  TopicName:
    Type: String
    Default: test
    Description: "Name for topic/queue"

  QueueRetentionPeriod:
    Type: Number
    Default: 1209600
    MinValue: 50
    MaxValue: 1209600
    Description: "SQS MessageRetentionPeriod in seconds."

  QueueAlarmDepth:
    Type: Number
    Default: 10000
    MinValue: 1000
    Description: "Alarm will fire if queue grows beyond this depth."

  Tag1Key:
    Type: String
    Default: App
    Description: "Key for Tag1: App=sample"

  Tag1Value:
    Type: String
    Default: sample
    Description: "Value for Tag1: App=sample"

  Tag2Key:
    Type: String
    Default: Env
    Description: "Key for Tag2: Env=test"

  Tag2Value:
    Type: String
    Default: test
    Description: "Value for Tag2: Env=test"

Resources:

  ###
  ### SNS
  ###   https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html
  ###
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:   !Ref TopicName
      DisplayName: !Ref TopicName
      Subscription:
        - { "Protocol":"sqs", "Endpoint": !GetAtt [ "MySQSQueue" , "Arn" ] }


  ###
  ### SQS
  ###   https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
  ###

  # RetentionPeriod           VisibilityTimeout   ReceiveMessageWaitTime
  #     Min:      60s -  1m         0s                  0s
  #     Max: 1209600s - 14d     43200s - 12h           20s
  # Default:  345600s -  4d        30s                  0s
  #
  MySQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref TopicName
      VisibilityTimeout: 60
      MessageRetentionPeriod: !Ref QueueRetentionPeriod
      ReceiveMessageWaitTimeSeconds: 5
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt [ "MySQSDeadLetter", "Arn" ]
        maxReceiveCount: 1000
      Tags:
        - { "Key" : !Ref Tag1Key, "Value" : !Ref Tag1Value }
        - { "Key" : !Ref Tag2Key, "Value" : !Ref Tag2Value }

  MySQSDeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Join [ '-', [ !Ref TopicName, "dl" ] ]
      MessageRetentionPeriod: 1209600
      Tags:
        - { "Key" : !Ref Tag1Key, "Value" : !Ref Tag1Value }
        - { "Key" : !Ref Tag2Key, "Value" : !Ref Tag2Value }


  # Ref:
  #   https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html
  #
  MyQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: MyQueuePolicy
        Statement:
          -
            Sid: "Allow-SQSSendMessage-From-SNSTopic"
            Effect: "Allow"
            Action: "sqs:SendMessage"
            Resource: "*"
            Principal: "*"
            Condition:
              ArnEquals: { "aws:SourceArn": !Ref MySNSTopic }
      Queues:
        - !Ref MySQSQueue


  #
  # Ref:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html#cfn-cloudwatch-alarms-okactions
  #
  MyQueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join [ '-', [ "sqs-alarm", !Ref TopicName ] ]
      AlarmDescription: "Alarm if queue depth grows beyond 'n' messages"
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        -
          Name: "QueueName"
          Value: !GetAtt [ "MySQSQueue", "QueueName" ]
      Statistic: "Sum"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: !Ref QueueAlarmDepth
      ComparisonOperator: "GreaterThanThreshold"
    # OkActions:
    #   - !Ref AlarmTopic
    # AlarmActions:
    #   - !Ref AlarmTopic
    # InsufficientDataActions:
    #   - !Ref AlarmTopic



